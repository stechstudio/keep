import{_ as t,c as a,o,ag as r}from"./chunks/framework.NZEWNlnP.js";const h=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),n={name:"guide/index.md"};function s(i,e,l,c,d,p){return o(),a("div",null,[...e[0]||(e[0]=[r('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>Keep is a toolkit for collaborative, secure management of secrets across applications, environments, and teams. It provides a consistent interface for managing secrets whether they&#39;re stored locally during development or in cloud services like AWS SSM Parameter Store or AWS Secrets Manager in production.</p><h2 id="what-is-keep" tabindex="-1">What is Keep? <a class="header-anchor" href="#what-is-keep" aria-label="Permalink to &quot;What is Keep?&quot;">​</a></h2><p>Keep addresses the common challenge of managing environment variables and secrets across different stages of development and deployment. Instead of passing around <code>.env</code> files through insecure channels, Keep provides:</p><ul><li><strong>Centralized Secret Storage</strong>: Store secrets in various backends (local, AWS SSM, AWS Secrets Manager)</li><li><strong>Environment Staging</strong>: Organize secrets by stages (development, staging, production)</li><li><strong>Template-Based Generation</strong>: Generate configuration files from templates with proper secret injection</li><li><strong>Team Collaboration</strong>: Share access to secrets without exposing their values</li><li><strong>Laravel Integration</strong>: Seamless integration with Laravel applications</li></ul><h2 id="key-concepts" tabindex="-1">Key Concepts <a class="header-anchor" href="#key-concepts" aria-label="Permalink to &quot;Key Concepts&quot;">​</a></h2><h3 id="vaults" tabindex="-1">Vaults <a class="header-anchor" href="#vaults" aria-label="Permalink to &quot;Vaults&quot;">​</a></h3><p>Vaults are storage backends for your secrets. Keep supports:</p><ul><li><strong>Local Vault</strong>: File-based storage for development</li><li><strong>AWS SSM</strong>: AWS Systems Manager Parameter Store</li><li><strong>AWS Secrets Manager</strong>: AWS managed secrets service</li></ul><h3 id="stages" tabindex="-1">Stages <a class="header-anchor" href="#stages" aria-label="Permalink to &quot;Stages&quot;">​</a></h3><p>Stages represent different environments like <code>development</code>, <code>staging</code>, and <code>production</code>. Each vault can store secrets for multiple stages, allowing you to promote secrets through your deployment pipeline.</p><h3 id="contexts" tabindex="-1">Contexts <a class="header-anchor" href="#contexts" aria-label="Permalink to &quot;Contexts&quot;">​</a></h3><p>A context combines a vault and stage, written as <code>vault:stage</code> (e.g., <code>myapp:production</code>). This tells Keep exactly where to find or store a secret.</p><h3 id="templates" tabindex="-1">Templates <a class="header-anchor" href="#templates" aria-label="Permalink to &quot;Templates&quot;">​</a></h3><p>Templates are configuration files with placeholders that get replaced with actual secret values. This allows you to generate <code>.env</code> files, configuration files, or any text-based configuration.</p><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>Ready to start using Keep? Head over to the <a href="./installation.html">Installation Guide</a> to set up Keep in your project.</p>',17)])])}const u=t(n,[["render",s]]);export{h as __pageData,u as default};
